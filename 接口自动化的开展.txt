项目开展接口自动化：
    一、可行性分析：
        项目适不适合：
            1、项目是否频繁迭代
            2、项目的开发模式：
                前后端不分离的项目：接口对于业务覆盖率不高
                前后端分离（主流）的项目：接口基本上所有的业务都能覆盖
        测试团队的人员:

    二、如何下手，怎么开展？
       1、接口文档   --->  找开发
                         或者抓包：  参数抓不去全 ，每个参数是什么意思也不清楚（不靠谱）
       2、工具测试接口
       3、进行优先级划分：
            1、核心的接口（主流程）
            2、其他稳定的接口
            3、不是特别好覆盖用例（放到最后有时间再去加）

    三、 技术选型：
         1、通过工具去做（postman,jmeter）
         2、通过接口自动化平台去做(自研平台，第三方的平台)
         3、自己写框架

    四、业务分析和框架搭建（自己写框架）
       1、封装公共模块（日志、数据库操作、配置文件等等）
       2、是否涉及到参数加密，是否涉及第三方接口（mock）

    五、编写测试用例数据(excel，json,yaml,数据库)
    六、写测试类（选择哪个测试框架unittest or  pytest）

    七、持续优化
        1、重复的代码进行封装和优化

    八、项目后期迭代的维护
        - 新增的接口
        - 接口发生变动（参数，地址）

    九、测试结果的分析：
        分析未通过用例的原因：
            1、用例数据的问题就进行优化
            2、是bug就提bug

        分析自动化的成效：
            1、开展自动化之前和开展自动化之后，回归的bug数量
            2、测试效率的提升

一、用例编写
1、定义 test开头的py文件
2、定义继承unittest.TestCase的用例类
3、定义test开头的测试用例方法

二、套件的使用
1、将测试用例加载到测试套件:unittest.defaultTestLoader.discover(用例文件所在的路径)

三、测试运行程序
1、unittestreport里面的TestRunner

四、测试夹具fixture：
1、用例级别
2、测试类级别

五、断言：

前提：准备好用例数据
#  一、定义用例类
#  二、excel中读取用例数据
#  三、使用ddt通过数据去生成测试用例：
#  四、完善用例执行的逻辑
    1、准备用例数据
    2、进行测试（调用被测的函数，获取返回的实际结果）
    3、断言
        通过try来捕获断言异常去区分用例是否执行通过：
            断言不通过
                回写结果到excel
                记录日志
            断言通过：
                回写结果到excel
                记录日志

知识跳转：【记录日志】   ----->需要使用日志收集器（导入创建好的日志收集器）
    日志收集器的创建代码封装好在handle_log模块中 ：
        handle_log模块：
            1、去配置文件中读取日志相关的配置数据：【收集器名字、日志文件名、收集等级，输入到文件的等级，输入出到控制台的登录】
            2、根据读取出来的数据，调用创建日志收集器的方法创建一个日志收集器

知识跳转： 【创建日志收集器】------->需要使用配置文件解析器对象（导入handle_conf模块中的配置文件解析器对象）
    handle_conf中定义了一个Config类（继承于configParser）
    重写了configParser的__init__方法，
    在init方法中添加了调用read读取配置文件内容的操作

项目结构管理优化：
                     文件夹
用例数据文件     ---> datas
日志文件        --->  logs
测试报告        --->  reports
配置文件        --->  conf
测试用例模块     ---> testcases
封装的公共模块    ---> common
    封装的读取excel的模块
    封装的读取创建日志收集器的模块
    封装的读取配置文件的模块

项目运行启动模块   run.py(项目的启动文件一般是在项目的根目录下)



一、数据提取
1、jsonpath：从json数据(dict)里面提取数据
2、re：从字符串提取数据
(个人备注：有规则得数据用jsonpath，没有规则得数据用正则表达式)


二、使用场景
1、参数依赖问题：A接口返回值需要用到B接口作为请求参数

三、python中的json数据处理
将json数据转换成json字符串类型
dict_str = json.dumps(test_dict)
将jsonstr转成dict(json)
res = json.loads(dict_str)





